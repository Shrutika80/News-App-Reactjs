{"version":3,"sources":["Components/SourcesCard.js","Components/TopNews.js","Components/sourcesNews.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","card","display","padding","spacing","border","borderRadius","boxShadow","details","flexDirection","content","flex","cover","width","height","overflow","props","id","classes","Grid","item","xs","md","key","Card","className","CardMedia","image","urlToImage","title","url","CardContent","Typography","gutterBottom","variant","component","paragraph","description","cid","CardActions","actions","disableActionSpacing","Button","size","color","href","target","TopNews","state","articles","loading","fetch","then","response","json","data","setState","console","log","catch","err","this","fetchTopNews","topNews","map","article","source","LinearProgress","Component","SourcesNews","sources","fetchChannrelnews","channelnews","SourcesCard","root","AppBar","position","app","Toolbar","button","onClick","flexGrow","menuButton","marginLeft","App","to","link","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.9735c698.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst styles = theme => ({\r\n  card: {\r\n    display: 'flex',\r\n    padding: theme.spacing(4),\r\n    border: 0,\r\n    borderRadius: 3,\r\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n  },\r\n  details: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  content: {\r\n    flex: '1 0 auto',\r\n  },\r\n  cover: {\r\n    width: 200,\r\n    height:200,\r\n    borderRadius: 5,\r\n    overflow: 'hidden',\r\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n  }\r\n});\r\n\r\n function Source(props, id) {\r\n  const { classes } = props;\r\n  return (\r\n    <Grid item xs={12} md={12} key={id}>\r\n      <Card className={classes.card}>\r\n        <CardMedia\r\n          className={classes.cover}\r\n          image={props.urlToImage}\r\n          title={props.url}\r\n        />\r\n        <div className={classes.details}>\r\n            <CardContent className={classes.content}>\r\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">{props.title}</Typography>\r\n            <Typography variant=\"body2\" paragraph>\r\n                {props.description}\r\n            </Typography>\r\n            <Typography variant=\"body3\" paragraph>\r\n                {props.cid}\r\n            </Typography>\r\n            </CardContent>  \r\n            <CardActions className={classes.actions} disableActionSpacing>\r\n              <Button size=\"small\" color=\"primary\" href={props.url} target=\"_blank\">\r\n                Learn More\r\n              </Button>\r\n          </CardActions>                   \r\n        </div>\r\n      </Card>\r\n    </Grid>\r\n  )\r\n}\r\nexport default withStyles(styles)(Source);","import React, { Component } from 'react'\r\nimport SourceCard from './SourcesCard'\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nexport default class TopNews extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            articles:[],\r\n            loading: true\r\n        }\r\n    }\r\n\r\n    fetchTopNews(){\r\n        fetch(`http://newsapi.org/v2/top-headlines?country=in&apiKey=86ce5a9fba75471fa28bfd9790cab9d9`)\r\n        .then(response => {\r\n          return response.json()\r\n        })\r\n        .then(data => {\r\n          this.setState({\r\n            articles: data.articles,\r\n            loading: false\r\n          })\r\n          console.log(data)\r\n        })\r\n        .catch(err => console.log(\"opps!! an error ocurred\"))\r\n      }\r\n\r\n      componentWillMount(){\r\n        this.fetchTopNews()\r\n      }\r\n\r\n    render() {\r\n\r\n        const topNews = this.state.articles.map((article, id) => (\r\n            <SourceCard\r\n              key={id}\r\n              cid={article.source.id}\r\n              title={article.title}\r\n              description={article.description}\r\n              url={article.url}\r\n              urlToImage={article.urlToImage}\r\n            />\r\n        ));\r\n\r\n        return (\r\n            <div>\r\n                { this.state.loading ? <LinearProgress /> : topNews }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport SourcesCard from './SourcesCard';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\n\r\nconst useStyles = (theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 2,\r\n  },\r\n  button: {\r\n    marginLeft: theme.spacing(3)\r\n  },\r\n});\r\n\r\nclass SourcesNews extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      id:'google-news',\r\n      sources:[],\r\n      loading: true\r\n    }\r\n  }\r\n\r\n  fetchChannrelnews(id){\r\n      fetch(`https://newsapi.org/v2/top-headlines?sources=${id}&apiKey=87e84931f10444c49fac2830d412f20d`)\r\n         .then(response => {\r\n           return response.json()\r\n         })\r\n         .then(data => {\r\n           this.setState({\r\n             loading: false,\r\n             sources: data.articles\r\n           })\r\n           console.log(data)\r\n         })\r\n         .catch(err => console.log(\"opps!! an error ocurred\"))\r\n      }   \r\n\r\n      componentDidUpdate(){\r\n        this.fetchChannrelnews(this.state.id)\r\n      }\r\n\r\n  render() {\r\n\r\n    const { classes } = this.props;\r\n    \r\n    const { loading } = this.state;\r\n    \r\n        const channelnews = this.state.sources.map((article, id) => (\r\n            <SourcesCard\r\n              key={id}\r\n              cid={article.source.id}\r\n              title={article.title}\r\n              description={article.description}\r\n              url={article.url}\r\n              urlToImage={article.urlToImage}\r\n            />\r\n        ));\r\n    return (\r\n      <div>\r\n        <div className={classes.root}>\r\n        <AppBar position=\"sticky\" color=\"inherit\" className={classes.app}>\r\n          <Toolbar>\r\n            <Button variant=\"outer\" className={classes.button} color=\"inherit\" onClick={() => this.setState({id:'google-news'})} >Google News</Button>\r\n            <Button variant=\"outer\" className={classes.button} color=\"inherit\" onClick={() => this.setState({id:'google-news-in'})} >Google News (India)</Button>\r\n            <Button variant=\"outer\" className={classes.button} color=\"inherit\" onClick={() => this.setState({id:'the-times-of-india'})} >The Times of India</Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n        { loading ? <LinearProgress /> : channelnews }\r\n      </div>  \r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default withStyles(useStyles)(SourcesNews)\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TopNews from './Components/TopNews';\nimport SourcesNews from './Components/sourcesNews';\n\n\n\nconst useStyles = (theme) => ({  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 2,\n  },\n  button: {\n    marginLeft: theme.spacing(3)\n    \n  },\n  link: {\n    color: \"white\"\n  }\n});\n\n  class App extends Component {\n    render() {\n      const { classes } = this.props;\n        return (\n          <Router>\n            <div>\n              <div className={classes.root}>\n              <AppBar position=\"sticky\" color=\"primary\" className={classes.app}>\n                <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                  BrightNews\n                </Typography >\n                  <Button variant=\"outer\"  className={classes.button} color=\"inherit\"><Link to='/' className={classes.link}>Top Headlines</Link></Button>\n                  <Button variant=\"outer\"  className={classes.button} color=\"inherit\"><Link to='/source'className={classes.link}>Sources</Link></Button>\n                </Toolbar>\n              </AppBar>\n            </div>\n              <div>\n                <Switch>\n                  <Route exact path='/' component={TopNews}/>\n                  <Route path='/Source' component={SourcesNews}/>\n                </Switch>\n              </div>  \n            </div>  \n          </Router>\n        )\n      }\n} \n\nexport default withStyles(useStyles)(App)\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}